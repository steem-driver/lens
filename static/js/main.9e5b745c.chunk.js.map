{"version":3,"sources":["TradeTable.jsx","TradeHistoryTable.jsx","App.js","serviceWorker.js","index.js"],"names":["TradeTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","columns","data","pages","loading","_this2","react_default","a","createElement","es","pageSize","onFetchData","instance","length","setState","fetchData","_this$props","token","table","order_columns","Header","accessor","concat","history_columns","_this3","_this$props2","index","descending","axios","post","jsonrpc","id","method","params","contract","query","symbol","limit","offset","indexes","then","res","result","map","tx","Number","toFixed","Date","toLocaleString","React","Component","TradeHistoryTable","url","get","transactions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","rows","buildRows","push","err","return","filter","e","sender","_this$getTradeInfo","getTradeInfo","receiver","quantity","volume","row","type","timestamp","price","events","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref","location","URLSearchParams","search","Navbar","bg","variant","Brand","alt","src","width","height","className","Nav","react_router_dom","to","OpenOrder","_ref2","Container","Row","Col","TradeTable_TradeTable","TradeHistory","_ref3","TradeHistoryTable_TradeHistoryTable","AppRouter","react_router","component","path","exact","Boolean","window","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e5b745c.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\nconst url = \"https://api.steem-engine.com/rpc/contracts\";\n\nexport default class TradeTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      pages: -1,\n      loading: true\n    }\n  }\n\n  render() {\n    return <ReactTable\n      columns={this.columns()}\n      data={this.state.data} // should default to []\n      pageSize={20}\n      loading={this.state.loading}\n      // manual // informs React Table that you'll be handling sorting and pagination server-side\n      onFetchData={(state, instance) => {\n        if (state.data.length === 0) {\n          // show the loading overlay\n          this.setState({loading: true});\n          this.fetchData();\n        }\n      }}\n    />\n  }\n\n  columns() {\n    const { token, table } = this.props;\n\n    const order_columns = [{\n      Header: 'Account',\n      accessor: 'account'\n    }, {\n      Header: 'Price (Steem)',\n      accessor: 'price'\n    }, {\n      Header: `${token} Amount`,\n      accessor: 'quantity'\n    }, {\n      Header: \"Steem Amount\",\n      accessor: 'volume'\n    }, {\n      Header: \"Date\",\n      accessor: \"timestamp\"\n    }];\n\n  const history_columns = [{\n      Header: 'Type',\n      accessor: 'type'\n    }, {\n      Header: 'Price (Steem)',\n      accessor: 'price',\n    }, {\n      Header: `${token} Amount`,\n      accessor: 'quantity'\n    }, {\n      Header: \"Steem Amount\",\n      accessor: 'volume'\n    }, {\n      Header: \"Date\",\n      accessor: \"timestamp\"\n    }];\n\n    if (table === \"tradesHistory\")\n      return history_columns;\n    else\n      return order_columns;\n  }\n\n  fetchData() {\n    const { token, table, index, descending } = this.props;\n    const contract = \"market\";\n\n    // fetch your data\n    axios.post(url, {\n      \"jsonrpc\":\"2.0\",\n      \"id\":18,\n      \"method\":\"find\",\n      \"params\": {\n        \"contract\": contract,\n        \"table\": table,\n        \"query\": { \"symbol\": token },\n        \"limit\": 500,\n        \"offset\": 0,\n        \"indexes\":[{\"index\":index, \"descending\": descending}]\n      }\n    })\n      .then((res) => {\n        if (res && res.data && res.data.result) {\n          const result = res.data.result.map(tx => {\n            if (!tx['volume']) {\n               tx['volume'] = Number(tx['price'] * tx['quantity'])\n            }\n            tx['volume'] = Number(tx['volume']).toFixed(3);\n            tx['quantity'] = Number(tx['quantity']).toFixed(3);\n            if (tx['timestamp']) {\n              tx['timestamp'] = new Date(tx['timestamp'] * 1000).toLocaleString();\n            }\n            return tx;\n          })\n          // update table\n          this.setState({\n            data: result,\n            loading: false\n          })\n        }\n      })\n  }\n}\n\n\n\n\n","import React from \"react\";\nimport axios from 'axios';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\nconst cors_proxy = 'https://cors-anywhere.herokuapp.com/';\n\nexport default class TradeHistoryTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      pages: -1,\n      loading: true\n    }\n  }\n\n  render() {\n    return <ReactTable\n      columns={this.columns()}\n      data={this.state.data} // should default to []\n      pageSize={20}\n      loading={this.state.loading}\n      // manual // informs React Table that you'll be handling sorting and pagination server-side\n      onFetchData={(state, instance) => {\n        if (state.data.length === 0) {\n          // show the loading overlay\n          this.setState({loading: true});\n          this.fetchData(state, instance);\n        }\n      }}\n    />\n  }\n\n  columns() {\n    const { token } = this.props;\n\n    return [{\n      Header: 'Type',\n      accessor: 'type'\n    }, {\n      Header: 'Buyer',\n      accessor: 'buyer'\n    }, {\n      Header: 'Seller',\n      accessor: 'seller'\n    }, {\n      Header: 'Price (Steem)',\n      accessor: 'price',\n    }, {\n      Header: `${token} Amount`,\n      accessor: 'quantity'\n    }, {\n      Header: \"Steem Amount\",\n      accessor: 'volume'\n    }, {\n      Header: \"Date\",\n      accessor: \"timestamp\"\n    }];\n  }\n\n  fetchData(state, instance) {\n    const { token } = this.props;\n    const contract = \"market\";\n    const pageSize = 1000;\n    const page = 1;\n    const url = `https://steem-engine.rocks/transactions.json?symbol=${token}&contract=${contract}&per_page=${pageSize}&page=${page}`;\n\n    // fetch your data\n    axios.get(`${cors_proxy}${url}`)\n      .then((res) => {\n        if (res && res.data && res.data.transactions) {\n          let result = [];\n          for (let tx of res.data.transactions) {\n            const rows = this.buildRows(tx);\n            if (rows != null) {\n              if (rows.length > 0) {\n                result = result.concat(rows);\n              } else {\n                result.push(rows);\n              }\n            }\n          }\n          // update table\n          this.setState({\n            data: result,\n            loading: false\n          })\n        }\n      })\n  }\n\n  buildRows(tx) {\n    const { token } = this.props;\n\n    if (tx['payload']['symbol'] !== token)\n      return null;\n    if (tx['action'] !== \"buy\" && tx['action'] !== \"sell\")\n      return null;\n\n    const events = tx['logs']['events'];\n    let transactions = events.filter(e => (e['event'] === \"transferFromContract\"));\n    if (!transactions || transactions.length === 0) {\n      return null;\n    } else {\n      // price: Number(tx['payload']['price']),\n      // quantity: Number(tx['payload']['quantity']),\n      // row['volume'] = Number(row['price'] * row['quantity']).toFixed(3)\n      let rows = [];\n      for (let index = 0 ; index + 1 < transactions.length; index += 2) {\n        // console.log(\"transaction\", transactions[index], transactions[index+1]);\n        const sender = tx['sender'];\n        const { receiver, quantity, volume } = this.getTradeInfo(sender, token, [transactions[index], transactions[index+1]]);\n\n        const row = {\n          type: tx['action'],\n          timestamp: new Date(tx['timestamp']).toLocaleString(),\n          price: Number(volume / quantity).toFixed(8),\n          quantity: Number(quantity).toFixed(3),\n          volume: Number(volume).toFixed(3)\n        }\n\n        if (row['type'] === \"buy\") {\n          row['buyer'] = sender;\n          row['seller'] = receiver;\n        } else if (row['type'] === \"sell\") {\n          row['seller'] = sender;\n          row['buyer'] = receiver;\n        }\n\n        rows.push(row);\n      }\n      return rows;\n    }\n  }\n\n  getTradeInfo(sender, token, events) {\n    let receiver = null, quantity = null, volume = null;\n    for (const e of events) {\n      const data = e['data'];\n      if (data['to'] !== sender)\n        receiver = data['to'];\n      if (data['symbol'] === token)\n        quantity = data['quantity'];\n      else if (data['symbol'] === \"STEEMP\")\n        volume = data['quantity'];\n    }\n    return { receiver, quantity, volume };\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Row, Col } from 'react-bootstrap';\nimport TradeTable from './TradeTable';\nimport TradeHistoryTable from './TradeHistoryTable';\n\n\nconst Header = ({ location }) => {\n  const params = new URLSearchParams(location.search);\n  const token = params.get(\"token\");\n\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>\n          <img\n            alt=\"\"\n            src=\"/favicon.ico\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />\n          {' Lens' }\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Link className=\"nav-link\" to={`/open_order?token=${token}`}>Open Orders</Link>\n          <Link className=\"nav-link\" to={`/trade_history?token=${token}`}>Trade History</Link>\n        </Nav>\n      </Navbar>\n      <br />\n    </div>\n  );\n}\n\nconst OpenOrder = ({ location }) => {\n  const params = new URLSearchParams(location.search);\n  const token = params.get(\"token\");\n\n  return ( <Container>\n    <Row>\n      <Col>\n        <h3>People Buying {token}</h3>\n        <TradeTable token={token} table=\"buyBook\" index=\"price\" descending={true} />\n      </Col>\n      <Col>\n        <h3>People Selling {token}</h3>\n        <TradeTable token={token} table=\"sellBook\" index=\"price\" descending={false} />\n      </Col>\n    </Row>\n  </Container> );\n}\n\nconst TradeHistory = ({ location }) => {\n  const params = new URLSearchParams(location.search);\n  const token = params.get(\"token\");\n\n  return ( <Container>\n    <Row>\n      <Col>\n        <h3>{token} Trade History</h3>\n        <TradeTable token={token} table=\"tradesHistory\" index=\"timestamp\" descending={false} />\n      </Col>\n      <Col>\n        <h3>{token} Trade History with Buyers and Sellers</h3>\n        <TradeHistoryTable token={token} index=\"timestamp\" descending={false}/>\n      </Col>\n    </Row>\n  </Container> );\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route component={Header}/>\n      <Route path=\"/\" exact component={OpenOrder} />\n      <Route path=\"/open_order\" component={OpenOrder} />\n      <Route path=\"/trade_history\" component={TradeHistory} />\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
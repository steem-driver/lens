{"version":3,"sources":["TradeTable.jsx","App.js","serviceWorker.js","index.js"],"names":["TradeTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","columns","data","pages","loading","_this2","_this$props","url","token","table","index","descending","react_default","a","createElement","es","pageSize","onFetchData","instance","setState","axios","post","jsonrpc","id","method","params","contract","query","symbol","limit","offset","indexes","then","res","result","map","tx","Number","toFixed","Date","toISOString","React","Component","App","_ref","location","URLSearchParams","search","get","order_columns","Header","accessor","concat","history_columns","Container","Row","Col","TradeTable_TradeTable","AppRouter","react_router_dom","react_router","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAMqBA,qBAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,GACTC,KAAM,GACNC,OAAQ,EACRC,SAAS,GANMX,wEAUV,IAAAY,EAAAT,KAAAU,EACmDV,KAAKJ,MAAvDe,EADDD,EACCC,IAAKC,EADNF,EACME,MAAOC,EADbH,EACaG,MAAOR,EADpBK,EACoBL,QAASS,EAD7BJ,EAC6BI,MAAOC,EADpCL,EACoCK,WAE3C,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACLd,QAASA,EACTC,KAAMN,KAAKI,MAAME,KACjBc,SAAU,GACVZ,QAASR,KAAKI,MAAMI,QAEpBa,YAAa,SAACjB,EAAOkB,GAEnBb,EAAKc,SAAS,CAACf,SAAS,IAExBgB,IAAMC,KAAKd,EAAK,CACde,QAAU,MACVC,GAAK,GACLC,OAAS,OACTC,OAAU,CACRC,SAAW,SACXjB,MAASA,EACTkB,MAAS,CAAEC,OAAUpB,GACrBqB,MAAS,IACTC,OAAU,EACVC,QAAU,CAAC,CAACrB,MAAQA,EAAOC,WAAcA,OAG1CqB,KAAK,SAACC,GACL,GAAIA,GAAOA,EAAI/B,MAAQ+B,EAAI/B,KAAKgC,OAAQ,CACtC,IAAMA,EAASD,EAAI/B,KAAKgC,OAAOC,IAAI,SAAAC,GAMjC,OALAA,EAAE,YAAkBC,OAAOD,EAAE,MAAYA,EAAE,UAAcE,QAAQ,GACjEF,EAAE,SAAeC,OAAOD,EAAE,UAAcE,QAAQ,GAC5CF,EAAE,YACJA,EAAE,UAAgB,IAAIG,KAAuB,IAAlBH,EAAE,WAAsBI,eAE9CJ,IAGT/B,EAAKc,SAAS,CACZjB,KAAMgC,EACN9B,SAAS,iBAnDeqC,IAAMC,oCCA9C,SAASC,EAATC,GAA2B,IAAZC,EAAYD,EAAZC,SACPtC,EAAM,6CAENC,EADS,IAAIsC,gBAAgBD,EAASE,QACvBC,IAAI,SACnBC,EAAgB,CAAC,CACnBC,OAAQ,UACRC,SAAU,WACT,CACDD,OAAQ,gBACRC,SAAU,SACT,CACDD,OAAM,GAAAE,OAAK5C,EAAL,WACN2C,SAAU,YACT,CACDD,OAAQ,eACRC,SAAU,gBAGRE,EAAkB,CAAC,CACrBH,OAAQ,OACRC,SAAU,QACT,CACDD,OAAQ,gBACRC,SAAU,SACT,CACDD,OAAM,GAAAE,OAAK5C,EAAL,WACN2C,SAAU,YACT,CACDD,OAAQ,eACRC,SAAU,eACT,CACDD,OAAQ,OACRC,SAAU,cAId,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACIN,EADJ,WAGAI,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAA,2BAAmBN,GACnBI,EAAAC,EAAAC,cAAC2C,EAAD,CAAYlD,IAAKA,EAAKC,MAAOA,EAAOC,MAAM,UAAUC,MAAM,QAAQT,QAASgD,EAAetC,YAAY,KAExGC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAA,4BAAoBN,GACpBI,EAAAC,EAAAC,cAAC2C,EAAD,CAAYlD,IAAKA,EAAKC,MAAOA,EAAOC,MAAM,WAAWC,MAAM,QAAQT,QAASgD,EAAetC,YAAY,MAG3GC,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAA,UAAKN,EAAL,kBACAI,EAAAC,EAAAC,cAAC2C,EAAD,CAAYlD,IAAKA,EAAKC,MAAOA,EAAOC,MAAM,gBAAgBC,MAAM,YAAYT,QAASoD,EAAiB1C,YAAY,QAgB/G+C,MARf,WACE,OACE9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,UAAWlB,MC9DJmB,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.86b68187.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\n\nexport default class TradeTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [],\n      data: [],\n      pages: -1,\n      loading: true\n    }\n  }\n\n  render() {\n    const { url, token, table, columns, index, descending } = this.props;\n\n    return <ReactTable\n      columns={columns}\n      data={this.state.data} // should default to []\n      pageSize={50}\n      loading={this.state.loading}\n      // manual // informs React Table that you'll be handling sorting and pagination server-side\n      onFetchData={(state, instance) => {\n        // show the loading overlay\n        this.setState({loading: true});\n        // fetch your data\n        axios.post(url, {\n          \"jsonrpc\":\"2.0\",\n          \"id\":18,\n          \"method\":\"find\",\n          \"params\": {\n            \"contract\":\"market\",\n            \"table\": table,\n            \"query\": { \"symbol\": token },\n            \"limit\": 500,\n            \"offset\": 0,\n            \"indexes\":[{\"index\":index, \"descending\": descending}]\n          }\n        })\n          .then((res) => {\n            if (res && res.data && res.data.result) {\n              const result = res.data.result.map(tx => {\n                tx['base_amount'] = Number(tx['price'] * tx['quantity']).toFixed(3);\n                tx['quantity'] = Number(tx['quantity']).toFixed(3);\n                if (tx['timestamp']) {\n                  tx['timestamp'] = new Date(tx['timestamp'] * 1000).toISOString();\n                }\n                return tx;\n              })\n              // update table\n              this.setState({\n                data: result,\n                loading: false\n              })\n            }\n          })\n      }}\n    />\n  }\n}\n\n\n\n\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport TradeTable from './TradeTable';\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\nfunction App({ location }) {\n  const url = \"https://api.steem-engine.com/rpc/contracts\";\n  const params = new URLSearchParams(location.search);\n  const token = params.get(\"token\");\n  const order_columns = [{\n      Header: 'Account',\n      accessor: 'account'\n    }, {\n      Header: 'Price (Steem)',\n      accessor: 'price',\n    }, {\n      Header: `${token} Amount`,\n      accessor: 'quantity'\n    }, {\n      Header: \"Steem Amount\",\n      accessor: 'base_amount'\n    }];\n\n  const history_columns = [{\n      Header: 'Type',\n      accessor: 'type'\n    }, {\n      Header: 'Price (Steem)',\n      accessor: 'price',\n    }, {\n      Header: `${token} Amount`,\n      accessor: 'quantity'\n    }, {\n      Header: \"Steem Amount\",\n      accessor: 'base_amount'\n    }, {\n      Header: \"Date\",\n      accessor: \"timestamp\"\n    }];\n\n\n  return (\n    <div>\n      <h2>\n        { token } Market\n      </h2>\n      <br />\n\n      <Container>\n        <Row>\n          <Col>\n            <h3>People Buying {token}</h3>\n            <TradeTable url={url} token={token} table=\"buyBook\" index=\"price\" columns={order_columns} descending={true} />\n          </Col>\n          <Col>\n            <h3>People Selling {token}</h3>\n            <TradeTable url={url} token={token} table=\"sellBook\" index=\"price\" columns={order_columns} descending={false} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h3>{token} Trade History</h3>\n            <TradeTable url={url} token={token} table=\"tradesHistory\" index=\"timestamp\" columns={history_columns} descending={false} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route component={App} />\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}